// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum AuthRole {
  user
  admin
  super_admin
  organizer
}

enum Provider {
  google
  credential
}

enum Visibility {
  PRIVATE
  PUBLIC
}

enum MemberRoles {
  captain
  manager
  coach
  player
}

enum MemberStatus {
  invited
  joined
  rejected
  leaved
}

enum Loc {
  game
  banner
  tim
  user
  tournament
  article
  other
}

enum TournamentStatus {
  pending
  in_progress
  awaiting_review
  complete
}

enum TournamentType {
  single_stage
  two_stage
}

enum TournamentFormat {
  single_elimination
  double_elimination
  round_robin
  swiss
}

model User {
  id       Int      @id @default(autoincrement()) @db.UnsignedInt
  clientId String?  @map("client_id")
  name     String
  username String   @unique
  email    String   @unique
  password String?
  role     AuthRole @default(user)
  bio      String?  @db.Text
  nik      String?
  provider Provider @default(credential)
  avatar   String?

  createdAt              DateTime        @default(now()) @map("created_at")
  updatedAt              DateTime        @updatedAt @map("updated_at")
  Articles               Articles[]
  ResetPassword          ResetPassword[]
  notifications_sent     Notifications[] @relation("NotificationSender")
  notifications_received Notifications[] @relation("NotificationRecipient")
  TeamMembers            TeamMembers[]
  Tournaments            Tournaments[]

  @@map("users")
}

model ResetPassword {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  userId    Int      @map("user_id") @db.UnsignedInt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  token     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("reset_password")
}

model Tag {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  name       String   @db.VarChar(255)
  slug       String   @db.VarChar(255)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  article_tags ArticleTag[]

  @@map("tags")
}

model Category {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  name       String   @db.VarChar(255)
  slug       String   @db.VarChar(255)
  parent_id  Int?     @db.UnsignedInt
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relasi self-reference
  parent   Category?  @relation("CategoryHierarchy", fields: [parent_id], references: [id])
  children Category[] @relation("CategoryHierarchy")

  articles Articles[]

  @@map("categories")
}

model Articles {
  id           Int        @id @default(autoincrement()) @db.UnsignedInt
  author_id    Int        @db.UnsignedInt
  title        String     @db.VarChar(255)
  description  String     @db.VarChar(500)
  slug         String     @db.VarChar(255)
  category_id  Int        @db.UnsignedInt
  content      String     @db.LongText
  visibility   Visibility @default(PRIVATE)
  published_at DateTime?
  view_count   Int        @default(0)
  like_count   Int        @default(0)
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt

  // Relations
  author       User           @relation(fields: [author_id], references: [id], onDelete: Cascade)
  category     Category       @relation(fields: [category_id], references: [id])
  article_tags ArticleTag[]
  ArticleViews ArticleViews[]

  @@map("articles")
}

model ArticleViews {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  article    Articles @relation(fields: [article_id], references: [id])
  article_id Int      @db.UnsignedInt
  ip_address String
  viewed_at  DateTime @default(now())

  @@index([article_id, ip_address])
  @@map("article_views")
}

model ArticleTag {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  article_id Int      @db.UnsignedInt
  tag_id     Int      @db.UnsignedInt
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  article Articles @relation(fields: [article_id], references: [id], onDelete: Cascade)
  tag     Tag      @relation(fields: [tag_id], references: [id], onDelete: Cascade)

  @@unique([article_id, tag_id])
  @@map("article_tags")
}

model Games {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  name       String
  image      String
  banner     String
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  teams       Teams[]
  Tournaments Tournaments[]

  @@map("games")
}

model Notifications {
  id           Int       @id @default(autoincrement()) @db.UnsignedInt
  sender_id    Int?      @db.UnsignedInt
  recipient_id Int?      @db.UnsignedInt
  content      String
  is_read      Boolean?  @default(false)
  link         String
  created_at   DateTime? @default(now())

  sender    User? @relation("NotificationSender", fields: [sender_id], references: [id])
  recipient User? @relation("NotificationRecipient", fields: [recipient_id], references: [id])

  @@map("notifications")
}

model Promotion_banners {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  image      String
  link_url   String?
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("promotion_banners")
}

model Teams {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  name       String
  game_id    Int       @db.UnsignedInt
  image      String
  noTelp     String    @map("no_telp")
  bio        String?   @db.Text
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt
  game       Games     @relation(fields: [game_id], references: [id])

  TeamMembers TeamMembers[]

  @@map("teams")
}

model TeamMembers {
  id           Int          @id @default(autoincrement()) @db.UnsignedInt
  team_id      Int          @db.UnsignedInt
  user_id      Int          @db.UnsignedInt
  role         MemberRoles  @default(player)
  in_game_id   String?
  in_game_name String?
  status       MemberStatus @default(invited)
  invited_at   DateTime?    @default(now()) @map("invited_at")
  joined_at    DateTime?    @map("joined_at")
  rejected_at  DateTime?    @map("rejected_at")
  leaved_at    DateTime?    @map("leaved_at")

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  team Teams @relation(fields: [team_id], references: [id])
  user User  @relation(fields: [user_id], references: [id])

  @@unique([team_id, user_id])
  @@map("team_members")
}

model Gallery {
  id  Int    @id @default(autoincrement()) @db.UnsignedInt
  url String
  loc Loc    @default(other)

  @@map("gallery")
}

model Tournaments {
  id                       Int              @id @default(autoincrement()) @db.UnsignedInt
  organized_by             Int              @db.UnsignedInt
  tournament_name          String
  image                    String
  status                   TournamentStatus @default(pending)
  tournaments_slug         String           @unique
  tournament_challonge_url String           @unique
  description              String           @db.Text
  game_id                  Int              @db.UnsignedInt
  tournament_type          TournamentType
  tournament_format        TournamentFormat
  group_stage_format       TournamentFormat?
  participants_per_group   Int
  advance_per_group        Int
  is_paid                  Boolean          @default(false)
  fee                      String?          @default("0")
  limited_participant      Boolean          @default(false)
  max_participant          Int?
  registration_open        DateTime
  registration_close       DateTime
  tournament_start         DateTime
  tournament_end           DateTime
  required_check_in        Boolean?         @default(false)
  check_in_date            DateTime?
  is_offline_tournament    Boolean          @default(false)
  location_address         String?          @db.Text
  has_prize                Boolean          @default(false)
  prize_pool               String?          @db.Text
  youtube_link             String?
  creates_at               DateTime?        @default(now())
  updated_at               DateTime?        @updatedAt

  Organized User  @relation(fields: [organized_by], references: [id])
  Game      Games @relation(fields: [game_id], references: [id])

  @@map("tournaments")
}
